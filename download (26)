{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Импорт библиотек"
      ],
      "metadata": {
        "id": "r0E57vqZXiyQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "nQ90A9PuXiLj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Задание функций, градиентов и гессионов"
      ],
      "metadata": {
        "id": "98j0Ro2WXVUI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "f = x^2 + y^2 + z^2\n",
        "\n",
        "g = x^3 + y^3 - 3xy\n",
        "\n",
        "h = x^4"
      ],
      "metadata": {
        "id": "RkZsZZJwXter"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  x,y,z = x\n",
        "  return x**2 + y**2 + z**2\n",
        "\n",
        "def grad_f(x):\n",
        "  x,y,z = x\n",
        "  return np.array([2*x, 2*y, 2*z])\n",
        "\n",
        "def hessian_f(x):\n",
        "  x,y,z = x\n",
        "  return np.array([[2, 0, 0],\n",
        "                   [0, 2, 0],\n",
        "                   [0, 0, 2]])\n",
        "\n",
        "def g(x):\n",
        "  x, y = x\n",
        "  return x**3 + y**3 - 3*x*y\n",
        "\n",
        "def grad_g(x):\n",
        "  x, y = x\n",
        "  return np.array([3*x**2 - 3*y, 3*y**2 - 3*x])\n",
        "\n",
        "def hessian_g(x):\n",
        "  x, y = x\n",
        "  return np.array([[6*x, -3],\n",
        "                   [-3, 6*y]])\n",
        "\n",
        "def h(x):\n",
        "  return x**4\n",
        "\n",
        "def grad_h(x):\n",
        "  return 4*x**3\n",
        "\n",
        "def hessian_h(x):\n",
        "  return np.array([[12*x**2]])"
      ],
      "metadata": {
        "id": "LbSyhLCeIi_5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Проверка на выпуклость"
      ],
      "metadata": {
        "id": "sbxlU4HpLNut"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Метод сопряенных градиентов применим только для выпуклых функций, поэтому сначала надо проверить на выпуклость"
      ],
      "metadata": {
        "id": "o8iHChb9XLwN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def check_convexity(func, grad_func, hessian_func, x_range):\n",
        "  for x in x_range:\n",
        "      H = hessian_func(x)\n",
        "      eigenvalues = np.linalg.eigvals(H)\n",
        "      if not np.all(eigenvalues >= 0):\n",
        "        return False\n",
        "  return True"
      ],
      "metadata": {
        "id": "2RLr1KoRIkkC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Проверка выпуклости f(x, y, z)\n",
        "x = np.linspace(-10, 10, 10)\n",
        "y = np.linspace(-10, 10, 10)\n",
        "z = np.linspace(-10, 10, 10)\n",
        "x_range = np.array(np.meshgrid(x, y, z)).T.reshape(-1, 3)\n",
        "# print(x_range)\n",
        "is_convex = check_convexity(f, grad_f, hessian_f, x_range)\n",
        "print(f\"f(x, y, z) выпуклая: {is_convex}\")\n",
        "\n",
        "# Проверка выпуклости g(x, y)\n",
        "y_range = np.array(np.meshgrid(x, y)).T.reshape(-1, 2)\n",
        "is_convex = check_convexity(g, grad_g, hessian_g, y_range)\n",
        "print(f\"g(x, y) выпуклая: {is_convex}\")\n",
        "\n",
        "# Проверка выпуклости h(x)\n",
        "x_range = np.linspace(-10, 10, 10)\n",
        "is_convex = check_convexity(h, grad_h, hessian_h, x)\n",
        "print(f\"h(x) выпуклая: {is_convex}\")"
      ],
      "metadata": {
        "id": "6jfCMM6KIpUu",
        "outputId": "009b96ef-734b-422a-dd0e-19d01b2a8df7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f(x, y, z) выпуклая: True\n",
            "g(x, y) выпуклая: False\n",
            "h(x) выпуклая: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Применение метода сопряженных градиентов"
      ],
      "metadata": {
        "id": "zGUKEEUWLufe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def conjugate_gradient3(f, grad_f, x0, tol=1e-6, max_iter=1000, alpha_max=1.0, c=0.5, rho=0.5, alpha_min=1e-8):\n",
        "  \"\"\"\n",
        "  Метод сопряженных градиентов с backtracking line search.\n",
        "\n",
        "  Args:\n",
        "    f: Функция, для которой нужно найти минимум.\n",
        "    grad_f: Градиент функции.\n",
        "    x0: Начальная точка поиска.\n",
        "    tol: Допустимая погрешность.\n",
        "    max_iter: Максимальное количество итераций.\n",
        "    alpha_max: Максимальная длина шага.\n",
        "    c: Параметр для backtracking line search.\n",
        "    rho: Параметр для backtracking line search.\n",
        "    alpha_min: Минимальная длина шага.\n",
        "\n",
        "  Returns:\n",
        "    Кортеж (x_min, f_min), где x_min - точка минимума, f_min - значение функции в минимуме.\n",
        "  \"\"\"\n",
        "  arr_f = [f(x0)]\n",
        "  x = x0\n",
        "  r = -grad_f(x)\n",
        "  d = r\n",
        "\n",
        "  for i in range(max_iter):\n",
        "    alpha = alpha_max\n",
        "    while f(x + alpha * d) > f(x) + c * alpha * np.dot(grad_f(x), d) and alpha > alpha_min:\n",
        "      alpha *= rho\n",
        "\n",
        "    if alpha < alpha_min:\n",
        "      break\n",
        "\n",
        "    x = x + alpha * d\n",
        "    arr_f.append(f(x))\n",
        "    r_new = r - alpha * grad_f(x + d)\n",
        "    beta = np.dot(r_new, r_new) / np.dot(r, r)\n",
        "    d = r_new + beta * d\n",
        "    r = r_new\n",
        "\n",
        "    if np.linalg.norm(r) < tol:\n",
        "      break\n",
        "\n",
        "  f_min = f(x)\n",
        "  return x, f_min, arr_f"
      ],
      "metadata": {
        "id": "lMoUuxFzLtZ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Начальные точки\n",
        "x0_1 = np.array([1, 1, 6])\n",
        "x0_2 = np.array([8, -2])\n",
        "x0_3 = -0.5"
      ],
      "metadata": {
        "id": "VxWevugLMP0u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_min1, f_min1, arr_f1 = conjugate_gradient3(f, grad_f, x0_1)\n",
        "x_min2, f_min2, arr_f2 = conjugate_gradient3(g, grad_g, x0_2)\n",
        "x_min3, f_min3, arr_f3 = conjugate_gradient3(h, grad_h, x0_3)"
      ],
      "metadata": {
        "id": "AmRNx5tIQHuu",
        "outputId": "07c95c3c-c118-4416-c494-c6e8b2b821f7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-177-27efd86532f7>:17: RuntimeWarning: overflow encountered in scalar power\n",
            "  return x**3 + y**3 - 3*x*y\n",
            "<ipython-input-177-27efd86532f7>:17: RuntimeWarning: invalid value encountered in scalar add\n",
            "  return x**3 + y**3 - 3*x*y\n",
            "<ipython-input-177-27efd86532f7>:21: RuntimeWarning: invalid value encountered in scalar subtract\n",
            "  return np.array([3*x**2 - 3*y, 3*y**2 - 3*x])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def to_float(value):\n",
        "    try:\n",
        "      arr = []\n",
        "      for i in value:\n",
        "        arr.append(\"{:.2f}\".format(i))\n",
        "      return arr\n",
        "    except:\n",
        "      return \"{:.2f}\".format(value)\n",
        "\n",
        "print(f\"x_min1: {to_float(x_min1)}, f_min1: {to_float(f_min1)} за {len(arr_f1)} итераций\")\n",
        "print(f\"x_min1: {to_float(x_min2)}, f_min1: {to_float(f_min2)} за {len(arr_f2)} итераций\")\n",
        "print(f\"x_min1: {to_float(x_min3)}, f_min1: {to_float(f_min3)} за {len(arr_f3)} итераций\")"
      ],
      "metadata": {
        "id": "RYXJ7r44RZED",
        "outputId": "62d9224f-f7d2-45b0-831a-8db3f36eaffb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_min1: ['0.00', '0.00', '0.00'], f_min1: 0.00 за 2 итераций\n",
            "x_min1: ['nan', 'nan'], f_min1: nan за 1001 итераций\n",
            "x_min1: -0.00, f_min1: 0.00 за 41 итераций\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Как мы видим, из-за того, что вторая функция не выпуклая, то метод не смог найти для нее точку минимума"
      ],
      "metadata": {
        "id": "V8hUdgWyYJBE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Графики"
      ],
      "metadata": {
        "id": "YN2oVHl6V1z5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Создаем фигуру и оси для трех графиков\n",
        "fig, axs = plt.subplots(1, 3, figsize=(15, 5))  # 1 строка, 3 колонки\n",
        "\n",
        "# График 1\n",
        "axs[0].plot(range(len(arr_f1)), arr_f1, label=\"Функция 1\")\n",
        "axs[0].set_xlabel(\"k\")\n",
        "axs[0].set_ylabel(\"F(x_k)\")\n",
        "axs[0].set_title(\"График F1\")\n",
        "axs[0].legend()\n",
        "\n",
        "# График 2\n",
        "axs[1].plot(range(len(arr_f2)), arr_f2, label=\"Функция 2\")\n",
        "axs[1].set_xlabel(\"k\")\n",
        "axs[1].set_ylabel(\"F(x_k)\")\n",
        "axs[1].set_title(\"График F2\")\n",
        "axs[1].legend()\n",
        "\n",
        "# График 3\n",
        "axs[2].plot(range(len(arr_f3)), arr_f3, label=\"Функция 3\")\n",
        "axs[2].set_xlabel(\"k\")\n",
        "axs[2].set_ylabel(\"F(x_k)\")\n",
        "axs[2].set_title(\"График F3\")\n",
        "axs[2].legend()\n",
        "\n",
        "# Показываем графики\n",
        "plt.tight_layout()  # Для улучшения расположения графиков\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "7pk_ZSuDV1g_",
        "outputId": "01acd600-0386-40b0-ae1a-b1a055376581",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Аналогично: первая функция нашла свой минимум за 2 итерации, 2-я не нашла минимум корректно (значения после 3-й итерации = nan, что не отображено на графике), а 3-я нашла минимум за 40 итераций"
      ],
      "metadata": {
        "id": "TRhREEgTYSfd"
      }
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}